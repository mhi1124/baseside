<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xxfeii.baseside.modules.sys.mapper.UserMapper">
	
	<resultMap id="userMap" type="user">
		<id property="sid" column="sid"/>
		<result property="userName" column="userName"/>
		<result property="accountName" column="accountName"/>
		<result property="password" column="password"/>
		<result property="userStatus" column="userStatus"/>
		<result property="description" column="description"/>
		<result property="creatorName" column="creatorName"/>
		<result property="createTime" column="createTime"/>
		<result property="updateTime" column="updateTime"/>
		<result property="salt" column="salt"/>
		<collection property="role" column="r_id" ofType="role">
			<id property="sid" column="r_id"/>
			<result property="roleName" column="roleName"/>
			<result property="roleKey" column="roleKey"/>
			<result property="status" column="status"/>
			<result property="description" column="description"/>
			<result property="createTime" column="createTime"/>
			<result property="updateTime" column="updateTime"/>
		</collection>
	</resultMap>
	
	<sql id="column">sid,userName,accountName,password,userStatus,description,creatorName,createTime,updateTime,salt</sql>
	<insert id="insert" parameterType="user">
		insert into sys_user ( <include refid="column"/> )
		values (#{sid},#{userName},#{accountName},#{password},#{userStatus},
		#{description},#{creatorName},#{createTime},#{updateTime},#{salt})
	</insert>
	
	<insert id="insertBatch" parameterType="list">
		insert into sys_user (<include refid="column"/>)
		values 
		<foreach collection="list" item="user" separator=",">
			(
				#{user.sid},
				#{user.userName},
				#{user.accountName},
				#{user.password},
				#{user.userStatus},
				#{user.description},
				#{user.creatorName},
				#{user.createTime},
				#{user.updateTime},
				#{user.salt}
			)
		</foreach>
	</insert>
	<select id="findPage" parameterType="map" resultMap="userMap">
		select 
			m1.sid,
			m1.userName,
			m1.accountName,
			m1.password,
			m1.userStatus,
			m1.description,
			m1.creatorName,
			m1.createTime,
			m1.updateTime,
			m1.salt,
			sr.roleName,
			sr.roleKey,
			sr.sid as r_id,
			sr.roleName as roleName
		from sys_user m1 left join sys_role_user sru on m1.sid = sru.u_id
		left join sys_role sr on sru.r_id = sr.sid
		<where>
			<if test=" userStatus != null">
				m1.userStatus in 
				<foreach collection="userStatus" item = "status" open="(" separator="," close=")">
			    	#{status}  
			    </foreach> 
			</if>
			<if test=" accountName != null">
				and m1.accountName like concat('%',#{accountName},'%')
			</if>
			<if test=" userName != null">
				and m1.userName like concat('%',#{userName},'%')
			</if>
			<if test=" creatorName != null">
				and m1.creatorName = #{creatorName}
			</if>
		</where>
		<if test="pageNo != null and pageSize != null ">
			limit #{pageNo},#{pageSize}
		</if>
	</select>
	
	<select id="getCount" parameterType="map" resultType="Integer">
		select count(1) from sys_user 
		<where>
			<if test=" userStatus != null">
				userStatus = #{userStatus}
			</if>
			<if test=" accountName != null">
				and accountName = #{accountName}
			</if>
			<if test=" userName != null">
				and userName = #{userName}
			</if>
			<if test=" password != null">
				and password = #{password}
			</if>
			<if test=" creatorName != null">
				and creatorName = #{creatorName}
			</if>
			
		</where>
	</select>
	
	<delete id="delete" parameterType="String">
		delete from sys_user where id = #{id}
	</delete>
	
	<delete id="deleteBatchById" parameterType="list">
		<![CDATA[ 
			delete from sys_user where sid in 
		 ]]>
		 <foreach collection="list" item="sid" open="(" separator="," close=")">
		 	#{sid}
		 </foreach>
	</delete>
	
	<update id="update" parameterType="com.xxfeii.baseside.modules.sys.entity.User">
		update sys_user set 
		<trim suffixOverrides=",">
			<if test="userName != null"> userName = #{userName}, </if>
			<if test="accountName != null"> accountName = #{accountName} ,</if>
			<if test="password != null"> password = #{password} ,</if>
			<if test="userStatus != null"> userStatus = #{userStatus} ,</if>
			<if test="description != null"> description = #{description} ,</if>
			<if test="updateTime != null"> updateTime = #{updateTime} ,</if>
			<if test="salt != null"> salt = #{salt},</if>
		</trim>
		where sid = #{sid}
	</update>
	
	<select id="findUserByAccountName" parameterType="String" resultMap="userMap">
		select 
			m1.sid,
			m1.userName,
			m1.accountName,
			m1.password,
			m1.userStatus,
			m1.description,
			m1.creatorName,
			m1.createTime,
			m1.updateTime,
			m1.salt,
			sr.roleName,
			sr.roleKey,
			sr.sid as r_id
		from sys_user m1 left join sys_role_user sru on m1.sid = sru.u_id
		left join sys_role sr on sru.r_id = sr.sid
		<where>
			<if test="accountName != null"> m1.accountName = #{accountName} </if>
			<if test="password != null"> and m1.password = #{password} </if>
		</where>
	</select>
	
	<select id="findUserBySid" parameterType="String" resultMap="userMap">
		select 
			m1.sid,
			m1.userName,
			m1.accountName,
			m1.password,
			m1.userStatus,
			m1.description,
			m1.creatorName,
			m1.createTime,
			m1.updateTime,
			m1.salt,
			sr.roleName,
			sr.roleKey,
			sr.sid as r_id,
			sr.roleName as roleName
		from sys_user m1 left join sys_role_user sru on m1.sid = sru.u_id
		left join sys_role sr on sru.r_id = sr.sid
		WHERE m1.sid = #{id}
	</select>
	
</mapper>