<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd ">

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@service注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.xxfeii.baseside.**.service"/><!-- base-package 如果多个，用“,”分隔 -->

	<!-- 引入配置文件 -->
	<bean id="propertyResources" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:baseside.properties</value>
			</list>
		</constructor-arg>
	</bean>
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" ref="propertyResources" />
		<property name="fileEncoding" value="utf-8" />
	</bean>

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWeit}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />

		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟,超过30分钟,连接会自动关闭 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements" 
			value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="typeAliasesPackage" value="com.xxfeii.baseside" />
		<property name="mapperLocations" value="classpath*:mappings/**/*.xml" />
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
	</bean>

	<!-- 3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory 
		basePackage:指定sql映射文件/接口所在的包（自动扫描） -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xxfeii.baseside.**.mapper" />
		<!-- 读取配置文件properties中的值 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 定义事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事物管理方式一：基于xml配置方式 -->
	<!-- propagation:事物传播行为 read-only:读写或只读事务，默认读写 isolation:可选的事务隔离级别设置 rollback-for:导致事务回滚的异常类数组,Class对象数组，必须继承自Throwable,一般我们都继承RuntimeException 
		timeout:事务超时时间设置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				isolation="READ_COMMITTED" rollback-for="" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				isolation="READ_COMMITTED" rollback-for="" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				isolation="READ_COMMITTED" rollback-for="" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false"
				isolation="READ_COMMITTED" rollback-for="" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>


	<aop:config>
		<!-- 配置哪些类的方法进行事务管理:定义在service包或者子包里的任意方法的执行 -->
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.xxfeii.baseside.**.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut" />
	</aop:config>

	<!-- 事物管理方式二：基于@Transactional注解方式 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->

	<!-- 4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源 -->
	<!-- <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource"></property> </bean> -->

	<!-- 5. 使用声明式事务 transaction-manager：引用上面定义的事务管理器 -->
	<!-- <tx:annotation-driven transaction-manager="txManager" /> -->
	

</beans>
